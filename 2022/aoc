#!/usr/bin/env ruby
require_relative 'setup'

src_files = File.join(File.dirname(__FILE__), '*.rb')
Dir[src_files].sort_by{|f| [f =~ /(day|p)\d/ ? 1 : 0, f]}.each { |file| require file }

# The CLI application
class Aoc < Thor
  class_option :year, {default: Time.now.year.to_s}
  class_option :day, {default: Time.now.day.to_s}
  class_option :debug

  desc 'setup', 'prepares a sample project for a given day: downloads the input, creates a sample source'
  def setup
    day = self.day
    File.open("day#{padded_day}",'w'){|f| f.print aoc_api.data(day)}
    code_file = "day#{padded_day}.rb"
    File.open(code_file,'w'){|f| f.print puzzle_source} unless File.exist?(code_file)
    FileUtils.chmod('u+x', code_file)
    aoc_api.examples(day).each_with_index do |ex,i|
      File.open("day#{padded_day}.ex#{i+1}",'w'){|f| f.print ex}
    end

    system("open https://adventofcode.com/#{year}/day/#{day}")
    system("code #{code_file}")
  end

  desc 'try', 'trys a given day/year'
  def try
    part1
    puts
    part2 if puzzle.respond_to?(:part2)
  end
  default_task :try

  desc 'part1', 'tries part1 for a given day/year'
  def part1
    t = Benchmark.realtime do
      puts puzzle.part1
    end
    puts "(obtained in #{t} seconds)"
  end

  desc 'part2', 'tries part2 for a given day/year'
  def part2
    t = Benchmark.realtime do
      puts puzzle.part2
    end
    puts "(obtained in #{t} seconds)"
  end

  protected
    def aoc_api
      @aoc_api ||= AocApi.new(year, ENV['AOC_COOKIE'])
    end

    def puzzle
      "Day#{padded_day}".constantize.new.tap{|p| p.debug = debug}
    end

    def year
      options[:year]
    end

    def day
      options[:day]
    end

    def padded_day
      '%02d' % day
    end

    def debug
      (ENV["DEBUG"] || options[:debug]).to_i != 0
    end

    def puzzle_source()
      <<~ruby
        #!/usr/bin/env ruby
        require_relative 'day'
        class Day#{padded_day} < Day
          # data is [], graph is {k => []}, f is {k => 0}, h is {}, answer,r,c,x,y are ints
          def part1
            # debug!
            #
            # v1, v2 = *input.split("\\n\\n")
            each_line do |line, li|
              # a,b,c,d = line.scan[/.../].flatten.map(&:to_i)
              # a,b,c,d = line.split(/[,- ]/).map(&:to_i)
              if something
                self.answer += 1
              end
            end

            # max_iters = 10
            # 1.upto(max_iters) do |iter|
            #
            # end

            puts "Answer is \#{answer}"
            submit_answer(part: 1, answer: answer) unless ARGV.join.include?('.ex')
          end

          # def part2
          #   # debug!
          #   puts "Answer is \#{answer}"
          #   submit_answer(part: 2, answer: answer) unless ARGV.join.include?('.ex')
          # end
        end
        if __FILE__ == $0
          ENV["INPUT"] = ARGV.last || __FILE__.split("/").last.gsub(".rb",'')
          d = Day#{padded_day}.new
          d.respond_to?(:part2) ? d.part2 : d.part1
        end

        =begin
        #{aoc_api.problem(day)}
        =end
      ruby
    end
end

Aoc.start
