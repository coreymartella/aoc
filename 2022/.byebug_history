c
t.y
h.y
@t
n
h.x > t.x
n
h.y
t.y
n
h.x
t.x
n
h.dist(t) <= 2**0.5
@t
@h
c
@h
@t
n
@t
@h
n
@t
@h
h
h.dist(t)
h.dist(t) <= 2**0.5
c
q
c
h.dist(t) <= 2**0.5
h.dist(t) < 2**0.5
2**0.5
h.dist(t)
h.man_dist(t)
c
@t
@h
h
h.man_dist(t)
n
c
h.x
(h.x - t.x).abs * (h.y - t.y).abs
n
 t.x == h.x
h.man_dist(t)
@t
@h
c
line
@t
@h
h
c
n
row
r
c
graph
graph.size
graph.keys
c
@sizes
c
@sizes
c
pp @sizes
@sizes
@sizes["/"]
puts dirs.keys.sort
q
c
command
c
dest
n
dest = command[/cd (.*)/, 1]
command
c
boxes.size
boxes
n
line
q
z
iz
iy
ix
fc
x
iz
q
c
ix = x & fc[0]
x
fc
q
dupes.flatten(1).histogram.values.max
dupes.flatten(1).histogram
dupes.flatten(1).uniq.size
dupes.flatten(1).size
dupes.size
ons.keys.size
overlaps.size
overlaps
lines.size
line
li
dupes
c
q
dupes.first
dupes.uniq.size
dupes.size
dupes
c
overlaps
q
c
q
c
n
new_ons
old_ons
n
old_ons
n
new_ons
n
ix
oxl
xl.any?
n
xr
xl
oxr
oxl
x
ix
n
z
y
x
oz
oy
ox
s
overlaps.size
mode
z
y
x
c
q
puts next_state
n
row
next_state[rownext][col]
col
rownext
n
row
puts curr
puts next_state
col
c
col
c
col
c
puts next_state
n
next_state[rownext][col]
next_state[rownext]
n
puts line
line.chars
col
puts curr
iters
c
iters
c
puts curr
c
iters
puts curr
puts line
row
q
iters
puts input
puts next_state
puts curr
row
line
c
q
input
c
q
c
q
programs.first
programs.size
c
expr_val
expr_state[_var]
expr_state[var]
expr_val
expr_state[_var]
_var
expr_var
expr_val
_val
_var
cmd, _var, _val = *line.split(" ")
c
q
c
expr_state
n
line
expr_state
c
expr_state
c
expr_state
c
expr_state
n
expr_state
c
n
expr_state
c
expr_state
n
expr_state
c
inputs[0]
expr_state
n
expr_state
q
expr_state
state
q
c
expr_state[_var]
_val
expr_val = expr_val =~ /-?\d+/ ? expr_val.to_i : expr_state[expr_val]
expr_val = _val
_val
