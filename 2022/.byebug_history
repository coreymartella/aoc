q
z
iz
iy
ix
fc
x
iz
q
c
ix = x & fc[0]
x
fc
q
dupes.flatten(1).histogram.values.max
dupes.flatten(1).histogram
dupes.flatten(1).uniq.size
dupes.flatten(1).size
dupes.size
ons.keys.size
overlaps.size
overlaps
lines.size
line
li
dupes
c
q
dupes.first
dupes.uniq.size
dupes.size
dupes
c
overlaps
q
c
q
c
n
new_ons
old_ons
n
old_ons
n
new_ons
n
ix
oxl
xl.any?
n
xr
xl
oxr
oxl
x
ix
n
z
y
x
oz
oy
ox
s
overlaps.size
mode
z
y
x
c
q
puts next_state
n
row
next_state[rownext][col]
col
rownext
n
row
puts curr
puts next_state
col
c
col
c
col
c
puts next_state
n
next_state[rownext][col]
next_state[rownext]
n
puts line
line.chars
col
puts curr
iters
c
iters
c
puts curr
c
iters
puts curr
puts line
row
q
iters
puts input
puts next_state
puts curr
row
line
c
q
input
c
q
c
q
programs.first
programs.size
c
expr_val
expr_state[_var]
expr_state[var]
expr_val
expr_state[_var]
_var
expr_var
expr_val
_val
_var
cmd, _var, _val = *line.split(" ")
c
q
c
expr_state
n
line
expr_state
c
expr_state
c
expr_state
c
expr_state
n
expr_state
c
n
expr_state
c
expr_state
n
expr_state
c
inputs[0]
expr_state
n
expr_state
q
expr_state
state
q
c
expr_state[_var]
_val
expr_val = expr_val =~ /-?\d+/ ? expr_val.to_i : expr_state[expr_val]
expr_val = _val
_val
_var
cmd,_var,_val = *line.split(" ")
line
state[var]
expr_val.scan(/inputs/).size
expr_val
program[li-2..li]
state
var
val
expr_state
line
local_variables
local_assigns
val
line
val
(state[var] > 10 && expr_val.scan(/inputs/).size <= 1)
(val > 10 && expr_state[var].scan(/inputs/).size <= 1)
var local
var
val
line
val
expr_state
q
state
line
val
q
c
expr_state
expr_state[:x] = eval(expr_state[:x])
var
expr_state
c
expr_state
c
n
expr_state
n
expr_state
n
expr_val
n
expr_val
n
line
c
line
q
expr_val
n
expr_val
n
expr_val
n
expr_val
line
c
n
line
expr_state
q
line
expr_state
c
expr_state
c
q
expr_state
val
expr_val
n
expr_state
n
var local
var
n
cmd
n
expr_state
c
states.size
c
