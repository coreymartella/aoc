c
q
c
q
c
rolls.values.sum
rolls
new_states.size
new_check_states.size
final_states
new_states[[8,8,1,1]]
new_states[[3,3,7,7]]
new_states[[3,3,1,1]]
states
rolls
new_states[[7,7,9,9]]
new_states.size
new_states
c
new_check_states
new_check_state
states
state
new_states
c
n
c
p2_wins
p1_wins
n
states
q
irb
unis
n
old_unis
n
check_states
n
new_state
n
state
new_state
n
state
q
c
check_states.to_a
check_states
c
n
c
n
check_states
n
input
states
c
q
@image[4][2..4]
@image[3][2..4]
@image[2][2..4]
@image.first.size
@image.size
@image
    h = @image.size
    w = @image.first.size
adj.to_i(2)
adj = "..##..###".tr('#.','10')
image[3]
image[2]
puts image.map(&:join).join("\n").tr('10','#.')
puts image
new_state(row,col)
q
qy
a.join.to_i(2)
a += @image[row+1][col-1..col+1]
a += @image[row][col-1..col+1]
a = @image[row-1][col-1..col+1]
@image[row+1][col-1..col+1]
@image[row][col-1..col+1]
@image[row-1][col-1..col+1]
q
image_out
c
n
col == 0
col
n
new_state(-1,-1)
n
new_state(row,col)
col
row
c
n
@image
n
@enhancement
n
c
q
enhancement = enhancement.chars.map{|c| c == '#' ? 1 : 0}
image
enhancement
enhancement,image = *input.split("\n\n")
input.split("\n\n").size
input.split("\n\n")
enhancement
enhancment,image = *input.split("\n\n")
input.senhancment,image = *input.split("\n\n")
input
q
counts
c
counts
c
counts
c
counts
c
counts
c
counts
c
counts
q
c
(other.beacons.map(&:abs) & beacons.map(&:abs)).size
      other.fix_at(*offset)
z
offset
      offset[0] += x
      offset[1] += y
      offset[2] += z
      offset = v_matches.keys.detect{|vk| v_matches[vk].size >= 12}.dup
offset
q
      offset = v_matches.keys.detect{|vk| v_matches[vk].size >= 12}.dup
offset
q
      v_matches = other.beacons.product(beacons).each_with_object({}) do |(ob, b), h|
        v = b - ob
        h[v] ||= []
        h[v] << [ob, b]
      end
v_matches.keys.select{|k| v_matches[k] == nil}
v_matches.size
v_matches.keys.size
v_matches.keys.detect{|vk| v_matches[vk].size >= 12}
v_matches.select{|k,v| v.size >= 12}
v_matches
v_matches.keys.detect{|k| v_matches[k] && v_matches[k].size >= 12}
v_matches.keys.size
v_matches.keys
v_matches.kesy
offset = v_matches.keys.detect{|vk| v_matches[vk].size >= 12}
v_matches
offset = v_matches.keys.detect{|vk| v_matches[vk].size >= 12}
v_moffset = v_matches.keys.detect{|vk| v_matches[vk].size >= 12}
v_matches.values.map(&:size)
v_matches
      offset = v_matches.keys.detect{|v| v_matches[v].size >= 12}
      offset = v_matches.keys.detect{|k| v_matches[k].size >= 12}
offset
q
(other.beacons.map(&:abs) & beacons.map(&:abs)).size
      other.fix_at(*offset)
offset
      offset[0] -= x
      offset[1] -= y
      offset[2] -= z
      offset = v_matches.keys.detect{|k| v_matches[k].size >= 12}
offset
q
      v_matches = other.beacons.product(beacons).each_with_object({}) do |(ob, b), h|
        v = b - ob
        h[v] ||= []
        h[v] << [ob, b]
      end
v_matches.keys
offset = v_matches.keys.detect{|k| v_matches[k].size >= 12}
v_matches
      offset = v_matches.keys.detect{|k| v_matches[k].size >= 12}
      offset[0] += x
      offset[1] += y
      offset[2] += z
(other.beacons.map(&:abs) & beacons.map(&:abs)).size
      other.fix_at(*offset)
offset
      offset[0] += x
      offset[1] += y
      offset[1] += z
offset = v_matches.keys.detect{|k| v_matches[k].size >= 12}
offset
self.z
self.y
self.x
q
self.x
self.offset
q
[0,1,2].permutation(3).to_a.size
[0,1,2].permutation(3).to_a
[0,1,2].permutation(3)
other.beacons.map(&:abs) & beacons.map(&:abs)
(other.beacons.map(&:abs) & beacons.map(&:abs))
v_matches[offset].size
v_matches[offset]
offset
q
 (other.beacons.map(&:abs) & beacons.map(&:abs)).size
q
 (other.beacons.map(&:abs) & beacons.map(&:abs)).size
offset
q
c
a && a2
a2 = [2,1,3]
a2 == [2,1,3]
b == [2,1,3]
a & b
a == [2,1,3]
a = [1,2,3]
v_match_keys
q
v_matches
v_match_keys
      v_match_keys = v_matches.keys.select{|k| v_matches[k].size >= 12}
      v_match_keys = v_matches.keys.select{|k| v_matches[v].size >= 12}
v_matches.transform_values(&:size)
v_matches.transform_keys(&:size)
v_matches
q
v_matches.select{|k,v| v.size >= 12}
v_matches
q
c
matched_beacons[0]
other_beacons[0]
other_beacon[0]
matched_beacons[0].x-other_beacons[0].x
matched_beacons[0].x-other_beacons[0]
other_beacons[0].x+matched_beacons[0].x-other_beacons[0]
other_beacons[0].x+matched_beacons[0].x
match_other_v = matched_beacons[0] - other_beacons[0]
      match_other_v = matched_beacons[0] - other_beacons[0]
      matched_beacons = vs[overlap_v]
      overlap_v = other_beacons[1] - other_beacons[0]
      matched_beacons = vs[overlap_v]
overlap_v = other_beacons[1] - other_beacons[0]
match_other_v = matched_beacons[0] - other_beacons[0]
b1.abs
b2
b2 = other_beacons[0]
