q
digits[9] = inputs.detect{|i| i.size == 6 && (i & digits[1]).size == 2 && (i & digits[4]).size == 4}
inputs.select{|i| i.size == 6 && (i & digits[1]).size == 2 && (i & digits[4]).size == 3}
        digits[6] = inputs.detect{|i| i.size == 6 && (i & digits[1]).size == 1}
inputs.select{|i| i.size == 6 && (i & digits[1]).size == 1}
inputs.detect{|i| i.size == 6 && (i & digits[1]).size == 1}
inputs
q
c
digits
c
"8008".to_i(10)
"8008".to_i
"0008".to_i
"08".to_i
digits
digits.values.map(&;size
digits.values
q
c
digits[5] = inputs.detect{|i| i.size == 5 && i != digits[3] && i != digits[2]}
digits[2] = inputs.detect{|i| i.size == 5 && i != digits[3] && (i & digits[4]).size == 2}
digits[3] = inputs.detect{|i| i.size == 5 && (i & digits[1]).size == 2}
digits[0] = inputs.detect{|i| i.size == 6 && i != digits[9] && i != digits[6]}
        digits[9] = inputs.detect{|i| i.size == 6 && (i & digits[1]).size == 2 && (i & digits[4]).size == 3}
inputs.select{|i| i.size == 6 && (i & digits[1]).size == 2 && (i & digits[4]).size == 3}
 inputs.select{|i| i.size == 6 && (i & digits[1]).size == 1}
        digits[6] = inputs.detect{|i| i.size == 6 && (i & digits[1]).size == 1}
        digits[8] = inputs.detect{|i| i.size == 7}
        digits[4] = inputs.detect{|i| i.size == 4}
        digits[7] = inputs.detect{|i| i.size == 3}
        digits[1] = inputs.detect{|i| i.size == 2}
digits = digits.invert
 (0..9).to_a - digits.invert.keys
digits.invert.keys.sort - (0..9).to_a
digits.invert.keys.sort - (0..9)
inputs
pp digits
digits
digits[output]
output
digits.size
q
outputs.map do |output|
          digits[output]
        end.join.to_i
outputs.map do |output|
          digits[output]
        end.join
outputs.map do |output|
          digits[output]
        end
        digits = digits.invert
        digits[5] = inputs.detect{|i| i.size == 5 && i != three && i != 2}
        digits[2] = inputs.detect{|i| i.size == 5 && i != three && (i & four).size == 2}
        digits[3] = inputs.detect{|i| i.size == 5 && (i & one).size == 1}
        digits[0] = inputs.detect{|i| i.size == 6 && i != nine && i != six}
        digits[9] = inputs.detect{|i| i.size == 6 && (i & one).size == 2 && (i & four).size == 3}
        digits[6] = inputs.detect{|i| i.size == 6 && (i & one).size == 1}
        digits[8] = inputs.detect{|i| i.size == 7}
        digits[4] = inputs.detect{|i| i.size == 4}
        digits[7] = inputs.detect{|i| i.size == 3}
        digits = {}
        digits[1] = inputs.detect{|i| i.size == 2}
inputs,outputs = *line.split("|").map{|s| s.split(" ").map(&:chars).map(&:sort)}
inputs
outputs
outputs.map do |output|
          digits[output]
        end
digits = map
map = map.invert
map.invert
SEGMENTS_BY_DEGITS[2] - SEGMENTS_BY_DEGITS[5]
    SEGMENTS_BY_DEGITS = {
      0 => %w(a b e f g),
      1 => %w(c f),
      2 => %w(a c d e g),
      3 => %w(a c d f g),
      4 => %w(b c d f),
      5 => %w(a b d f g),
      6 => %w(a b d e f g),
      7 => %w(a c f),
      8 => %w(a b c d e f g),
    }
three = inputs.detect{|i| i.size == 5 && (i & one).size == 1}
zero = inputs.detect{|i| i.size == 6 && i != nine && i != six}
        zero = inputs.detect{|i| i.size == 6 && i != nine && i != size}
        nine = inputs.detect{|i| i.size == 6 && (i & one).size == 2 && (i & four).size == 3}
six = inputs.detect{|i| i.size == 6 && (i & one).size == 1}
nine = inputs.select{|i| i.size == 6 && (i & one).size == 2 && (i & four).size == 3}
nine = inputs.detect{|i| i.size == 6 && (i & one).size == 2 && (i & four).size == 3}
six = inputs.select{|i| i.size == 6 && (i & one).size == 1}
six = inputs.detect{|i| i.size == 6 && (i & one).size == 1}
inputs.size
one
nine = inputs.select{|i| i.size == 6 && (i & one).size == 2}
nine = inputs.detect{|i| i.size == 6 && (i & one).size == 2}
        eight = inputs.detect{|i| i.size == 7}
        four = inputs.detect{|i| i.size == 4}
        seven = inputs.detect{|i| i.size == 3}
        one = inputs.detect{|i| i.size == 2}
        inputs,outputs = *line.split("|").map{|s| s.split(" ").map(&:chars)}
        nine = inputs.detect{|i| i.size == 6 && (i & one).any?}
one.chars & four.chars
one.chars & four
one & four
bd = (four.chars-one.chars) & (eight.chars - seven.chars)
four.chars
bd = four.chars & eight.chars
remap
remap[(four.chars - one.chars - eight.chars)] = 'c'
eight
four
        eight = inputs.detect{|i| i.size == 7}
        four = inputs.detect{|i| i.size == 4}
remap
remap[seven.chars - one.chars] = 'a'
seven.chars
remap
          remap[seven.split - one.split] = 'a'
        remap = {}
seven
one
        one = inputs.detect{|i| i.size == 2}
        seven = inputs.detect{|i| i.size == 3}
inputs
outputs
inputs
        inputs,outputs = *line.split("|").map{|s| s.split(" ")}
line.split("|").map{|s| s.split(" ")}
line.split("|").map{|s| s.split(" ")
line
line.split("|")
outputs
inputs
q
c
line
q
cq
c
y1c
x1
x1,y1,x2,y2 = *line.scan(/(\d+),(\d+) -> (\d+),(\d+)/).flatten
`subl ../`
x1
x1,y1,x2,y2 = *line.scan(/(\d+),(\d+) -> (\d+),(\d+)/)
x1,y1,x2,y2 = *line.scan /(\d+),(\d+) -> (\d+),(\d+)/
x1
x1,y1,x2,y2 = line.scan /(\d+),(\d+) -> (\d+),(\d+)/
line
q
c
board.keys.select{|k| board[k][:marked]}
board.keys.select{|k| board[k][:row] == 0}
board_dim = board.size**0.5
board.size
board
exit
`gem install upmark`
`bundle`
#doc.css("article.day-desc").inner_html
doc.css("article.day-desc").inner_html
doc.css("article.day-desc").text
doc.css("article.day-desc").size
doc.css("article.day-desc")
doc.query("article.day-desc")
doc.xpath("//article.day-desc").count
doc.xpath("//article").count
doc.xpath("article").count
doc = Nokogiri::HTML5(content)
doc = Nokogiri::HTML(content)
content
q
c
prev
curr
c
input
